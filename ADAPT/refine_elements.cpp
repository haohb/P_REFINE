#include "mpi.h"
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "refine_elements.h"
#include "Linked_List.h"

#define MIN(x,y) ((x) <= (y) ? (x) : (y))
#define MAX(x,y) ((x) >= (y) ? (x) : (y))

//global variables
extern int my_rank; /*rank of process*/
extern int num_procs; /*number of processes*/
extern FILE *in_f, *jou_f, *out_f, *debug_f; /*input output journal files global*/

void refine_tri(int conn[6], int cdim, int &nt, int tri[][3], int &nq, int quad[][4], long int &refinetype)
{
  assert(cdim >= 6);

  nt = nq = 0;

  int mask;
  mask = 0;
  if (conn[3] >= 0) mask += 1;
  if (conn[4] >= 0) mask += 2;
  if (conn[5] >= 0) mask += 4;
  
  if (refinetype >= 0)
    mask = (int) refinetype;
  else
    refinetype = (long int) mask;
 
  switch (mask)
  {
    case 0: // 000
      tri[nt][0] = conn[0];
      tri[nt][1] = conn[1];
      tri[nt][2] = conn[2];
      nt++;
      break;
    case 1: // 001
      tri[nt][0] = conn[0];
      tri[nt][1] = conn[3];
      tri[nt][2] = conn[2];
      nt++;
      tri[nt][0] = conn[3];
      tri[nt][1] = conn[1];
      tri[nt][2] = conn[2];
      nt++;
      break;
    case 2: // 010
      tri[nt][0] = conn[1];
      tri[nt][1] = conn[4];
      tri[nt][2] = conn[0];
      nt++;
      tri[nt][0] = conn[4];
      tri[nt][1] = conn[2];
      tri[nt][2] = conn[0];
      nt++;
      break;
    case 3: // 011
      quad[nq][0] = conn[2];
      quad[nq][1] = conn[0];
      quad[nq][2] = conn[3];
      quad[nq][3] = conn[4];
      nq++;
      tri[nt][0] = conn[1];
      tri[nt][1] = conn[4];
      tri[nt][2] = conn[3];
      nt++;
      break;
    case 4: // 100
      tri[nt][0] = conn[2];
      tri[nt][1] = conn[5];
      tri[nt][2] = conn[1];
      nt++;
      tri[nt][0] = conn[5];
      tri[nt][1] = conn[0];
      tri[nt][2] = conn[1];
      nt++;
      break;
    case 5: // 101
      quad[nq][0] = conn[1];
      quad[nq][1] = conn[2];
      quad[nq][2] = conn[5];
      quad[nq][3] = conn[3];
      nq++;
      tri[nt][0] = conn[0];
      tri[nt][1] = conn[3];
      tri[nt][2] = conn[5];
      nt++;
      break;
    case 6: // 110
      quad[nq][0] = conn[0];
      quad[nq][1] = conn[1];
      quad[nq][2] = conn[4];
      quad[nq][3] = conn[5];
      nq++;
      tri[nt][0] = conn[2];
      tri[nt][1] = conn[5];
      tri[nt][2] = conn[4];
      nt++;
      break;
    case 7: // 111
      tri[nt][0] = conn[0];
      tri[nt][1] = conn[3];
      tri[nt][2] = conn[5];
      nt++;
      tri[nt][0] = conn[3];
      tri[nt][1] = conn[1];
      tri[nt][2] = conn[4];
      nt++;
      tri[nt][0] = conn[5];
      tri[nt][1] = conn[4];
      tri[nt][2] = conn[2];
      nt++;
      tri[nt][0] = conn[3];
      tri[nt][1] = conn[4];
      tri[nt][2] = conn[5];
      nt++;
      break;
    default:
      break;
  }

}

void refine_quad(int conn[9], int cdim, int &nt, int tri[][3], int &nq, int quad[][4], long int &refinetype)
{
  assert(cdim >= 6);

  nt = nq = 0;

  int mask;
  mask = 0;
  if (conn[4] >= 0) mask += 1;
  if (conn[5] >= 0) mask += 2;
  if (conn[6] >= 0) mask += 4;
  if (conn[7] >= 0) mask += 8;
  if (conn[8] >= 0) mask += 16;
  
  if (refinetype >= 0)
    mask = (int) refinetype;
  else
    refinetype = (long int) mask;
 
  switch (mask)
  {
    case 0: // 00000
      quad[nq][0] = conn[0];
      quad[nq][1] = conn[1];
      quad[nq][2] = conn[2];
      quad[nq][3] = conn[3];
      nq++;
      break;
    case 1: // 00001
      tri[nt][0] = conn[4];
      tri[nt][1] = conn[3];
      tri[nt][2] = conn[0];
      nt++;
      tri[nt][0] = conn[4];
      tri[nt][1] = conn[2];
      tri[nt][2] = conn[3];
      nt++;
      tri[nt][0] = conn[4];
      tri[nt][1] = conn[1];
      tri[nt][2] = conn[2];
      nt++;
      break;
    case 2: // 00010
      tri[nt][0] = conn[5];
      tri[nt][1] = conn[0];
      tri[nt][2] = conn[1];
      nt++;
      tri[nt][0] = conn[5];
      tri[nt][1] = conn[3];
      tri[nt][2] = conn[0];
      nt++;
      tri[nt][0] = conn[5];
      tri[nt][1] = conn[2];
      tri[nt][2] = conn[3];
      nt++;
      break;
    case 3: // 00011
      tri[nt][0] = conn[0];
      tri[nt][1] = conn[4];
      tri[nt][2] = conn[3];
      nt++;
      tri[nt][0] = conn[1];
      tri[nt][1] = conn[5];
      tri[nt][2] = conn[4];
      nt++;
      tri[nt][0] = conn[2];
      tri[nt][1] = conn[3];
      tri[nt][2] = conn[5];
      nt++;
      tri[nt][0] = conn[3];
      tri[nt][1] = conn[4];
      tri[nt][2] = conn[5];
      nt++;
      break;
    case 4: // 00100
      tri[nt][0] = conn[6];
      tri[nt][1] = conn[1];
      tri[nt][2] = conn[2];
      nt++;
      tri[nt][0] = conn[6];
      tri[nt][1] = conn[0];
      tri[nt][2] = conn[1];
      nt++;
      tri[nt][0] = conn[6];
      tri[nt][1] = conn[3];
      tri[nt][2] = conn[0];
      nt++;
      break;
    case 5: // 00101
      quad[nq][0] = conn[0];
      quad[nq][1] = conn[4];
      quad[nq][2] = conn[6];
      quad[nq][3] = conn[3];
      nq++;
      quad[nq][0] = conn[4];
      quad[nq][1] = conn[1];
      quad[nq][2] = conn[2];
      quad[nq][3] = conn[6];
      nq++;
      break;
    case 6: // 00110
      tri[nt][0] = conn[0];
      tri[nt][1] = conn[5];
      tri[nt][2] = conn[6];
      nt++;
      tri[nt][0] = conn[1];
      tri[nt][1] = conn[5];
      tri[nt][2] = conn[0];
      nt++;
      tri[nt][0] = conn[2];
      tri[nt][1] = conn[6];
      tri[nt][2] = conn[5];
      nt++;
      tri[nt][0] = conn[3];
      tri[nt][1] = conn[0];
      tri[nt][2] = conn[6];
      nt++;
      break;
    case 7: // 00111
      quad[nq][0] = conn[0];
      quad[nq][1] = conn[4];
      quad[nq][2] = conn[6];
      quad[nq][3] = conn[3];
      nq++;
      tri[nt][0] = conn[1];
      tri[nt][1] = conn[5];
      tri[nt][2] = conn[4];
      nt++;
      tri[nt][0] = conn[5];
      tri[nt][1] = conn[6];
      tri[nt][2] = conn[4];
      nt++;
      tri[nt][0] = conn[2];
      tri[nt][1] = conn[6];
      tri[nt][2] = conn[5];
      nt++;
      break;
    case 8: // 01000
      tri[nt][0] = conn[7];
      tri[nt][1] = conn[0];
      tri[nt][2] = conn[1];
      nt++;
      tri[nt][0] = conn[7];
      tri[nt][1] = conn[1];
      tri[nt][2] = conn[2];
      nt++;
      tri[nt][0] = conn[7];
      tri[nt][1] = conn[2];
      tri[nt][2] = conn[3];
      nt++;
      break;
    case 9: // 01001
      tri[nt][0] = conn[0];
      tri[nt][1] = conn[4];
      tri[nt][2] = conn[7];
      nt++;
      tri[nt][0] = conn[1];
      tri[nt][1] = conn[2];
      tri[nt][2] = conn[4];
      nt++;
      tri[nt][0] = conn[2];
      tri[nt][1] = conn[7];
      tri[nt][2] = conn[4];
      nt++;
      tri[nt][0] = conn[3];
      tri[nt][1] = conn[7];
      tri[nt][2] = conn[2];
      nt++;
      break;
    case 10: // 01010
      quad[nq][0] = conn[0];
      quad[nq][1] = conn[1];
      quad[nq][2] = conn[5];
      quad[nq][3] = conn[7];
      nq++;
      quad[nq][0] = conn[7];
      quad[nq][1] = conn[5];
      quad[nq][2] = conn[2];
      quad[nq][3] = conn[3];
      nq++;
      break;
    case 11: // 01011
      quad[nq][0] = conn[7];
      quad[nq][1] = conn[5];
      quad[nq][2] = conn[2];
      quad[nq][3] = conn[3];
      nq++;
      tri[nt][0] = conn[0];
      tri[nt][1] = conn[4];
      tri[nt][2] = conn[7];
      nt++;
      tri[nt][0] = conn[4];
      tri[nt][1] = conn[5];
      tri[nt][2] = conn[7];
      nt++;
      tri[nt][0] = conn[1];
      tri[nt][1] = conn[5];
      tri[nt][2] = conn[4];
      nt++;
      break;
    case 12: // 01100
      tri[nt][0] = conn[0];
      tri[nt][1] = conn[1];
      tri[nt][2] = conn[7];
      nt++;
      tri[nt][0] = conn[1];
      tri[nt][1] = conn[6];
      tri[nt][2] = conn[7];
      nt++;
      tri[nt][0] = conn[2];
      tri[nt][1] = conn[6];
      tri[nt][2] = conn[1];
      nt++;
      tri[nt][0] = conn[3];
      tri[nt][1] = conn[7];
      tri[nt][2] = conn[6];
      nt++;
      break;
    case 13: // 01101
      quad[nq][0] = conn[4];
      quad[nq][1] = conn[1];
      quad[nq][2] = conn[2];
      quad[nq][3] = conn[6];
      nq++;
      tri[nt][0] = conn[0];
      tri[nt][1] = conn[4];
      tri[nt][2] = conn[7];
      nt++;
      tri[nt][0] = conn[7];
      tri[nt][1] = conn[4];
      tri[nt][2] = conn[6];
      nt++;
      tri[nt][0] = conn[3];
      tri[nt][1] = conn[7];
      tri[nt][2] = conn[6];
      nt++;
      break;
    case 14: // 01110
      quad[nq][0] = conn[0];
      quad[nq][1] = conn[1];
      quad[nq][2] = conn[5];
      quad[nq][3] = conn[7];
      nq++;
      tri[nt][0] = conn[2];
      tri[nt][1] = conn[6];
      tri[nt][2] = conn[5];
      nt++;
      tri[nt][0] = conn[6];
      tri[nt][1] = conn[7];
      tri[nt][2] = conn[5];
      nt++;
      tri[nt][0] = conn[3];
      tri[nt][1] = conn[7];
      tri[nt][2] = conn[6];
      nt++;
      break;
//    case 15: // 01111
//      quad[nq][0] = conn[4];
//      quad[nq][1] = conn[5];
//      quad[nq][2] = conn[6];
//      quad[nq][3] = conn[7];
//      nq++;
//      tri[nt][0] = conn[0];
//      tri[nt][1] = conn[4];
//      tri[nt][2] = conn[7];
//      nt++;
//      tri[nt][0] = conn[1];
//      tri[nt][1] = conn[5];
//      tri[nt][2] = conn[4];
//      nt++;
//      tri[nt][0] = conn[2];
//      tri[nt][1] = conn[6];
//      tri[nt][2] = conn[5];
//      nt++;
//      tri[nt][0] = conn[3];
//      tri[nt][1] = conn[7];
//      tri[nt][2] = conn[6];
//      nt++;
//      break;
//    case 16: // 10000
//      tri[nt][0] = conn[8];
//      tri[nt][1] = conn[0];
//      tri[nt][2] = conn[1];
//      nt++;
//      tri[nt][0] = conn[8];
//      tri[nt][1] = conn[1];
//      tri[nt][2] = conn[2];
//      nt++;
//      tri[nt][0] = conn[8];
//      tri[nt][1] = conn[2];
//      tri[nt][2] = conn[3];
//      nt++;
//      tri[nt][0] = conn[8];
//      tri[nt][1] = conn[3];
//      tri[nt][2] = conn[0];
//      nt++;
//      break;
//    case 17: // 10001
//      quad[nq][0] = conn[0];
//      quad[nq][1] = conn[4];
//      quad[nq][2] = conn[8];
//      quad[nq][3] = conn[3];
//      nq++;
//      quad[nq][0] = conn[4];
//      quad[nq][1] = conn[1];
//      quad[nq][2] = conn[2];
//      quad[nq][3] = conn[8];
//      nq++;
//      tri[nt][0] = conn[2];
//      tri[nt][1] = conn[3];
//      tri[nt][2] = conn[8];
//      nt++;
//      break;
//    case 18: // 10010
//      quad[nq][0] = conn[1];
//      quad[nq][1] = conn[5];
//      quad[nq][2] = conn[8];
//      quad[nq][3] = conn[0];
//      nq++;
//      quad[nq][0] = conn[5];
//      quad[nq][1] = conn[2];
//      quad[nq][2] = conn[3];
//      quad[nq][3] = conn[8];
//      nq++;
//      tri[nt][0] = conn[3];
//      tri[nt][1] = conn[0];
//      tri[nt][2] = conn[8];
//      nt++;
//      break;
//    case 19: // 10011
//      quad[nq][0] = conn[0];
//      quad[nq][1] = conn[4];
//      quad[nq][2] = conn[8];
//      quad[nq][3] = conn[3];
//      nq++;
//      quad[nq][0] = conn[4];
//      quad[nq][1] = conn[1];
//      quad[nq][2] = conn[5];
//      quad[nq][3] = conn[8];
//      nq++;
//      quad[nq][0] = conn[5];
//      quad[nq][1] = conn[2];
//      quad[nq][2] = conn[3];
//      quad[nq][3] = conn[8];
//      nq++;
//      break;
//    case 20: // 10100
//      quad[nq][0] = conn[2];
//      quad[nq][1] = conn[6];
//      quad[nq][2] = conn[8];
//      quad[nq][3] = conn[1];
//      nq++;
//      quad[nq][0] = conn[6];
//      quad[nq][1] = conn[3];
//      quad[nq][2] = conn[0];
//      quad[nq][3] = conn[8];
//      nq++;
//      tri[nt][0] = conn[0];
//      tri[nt][1] = conn[1];
//      tri[nt][2] = conn[8];
//      nt++;
//      break;
//    case 21: // 10101
//      tri[nt][0] = conn[0];
//      tri[nt][1] = conn[4];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[4];
//      tri[nt][1] = conn[1];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[1];
//      tri[nt][1] = conn[2];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[2];
//      tri[nt][1] = conn[6];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[6];
//      tri[nt][1] = conn[3];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[3];
//      tri[nt][1] = conn[0];
//      tri[nt][2] = conn[8];
//      nt++;
//      break;
//    case 22: // 10110
//      quad[nq][0] = conn[1];
//      quad[nq][1] = conn[5];
//      quad[nq][2] = conn[8];
//      quad[nq][3] = conn[0];
//      nq++;
//      quad[nq][0] = conn[5];
//      quad[nq][1] = conn[2];
//      quad[nq][2] = conn[6];
//      quad[nq][3] = conn[8];
//      nq++;
//      quad[nq][0] = conn[6];
//      quad[nq][1] = conn[3];
//      quad[nq][2] = conn[0];
//      quad[nq][3] = conn[8];
//      nq++;
//      break;
//    case 23: // 10111
//      quad[nq][0] = conn[4];
//      quad[nq][1] = conn[1];
//      quad[nq][2] = conn[5];
//      quad[nq][3] = conn[8];
//      nq++;
//      quad[nq][0] = conn[5];
//      quad[nq][1] = conn[2];
//      quad[nq][2] = conn[6];
//      quad[nq][3] = conn[8];
//      nq++;
//      tri[nt][0] = conn[6];
//      tri[nt][1] = conn[3];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[3];
//      tri[nt][1] = conn[0];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[0];
//      tri[nt][1] = conn[4];
//      tri[nt][2] = conn[8];
//      nt++;
//      break;
//    case 24: // 11000
//      quad[nq][0] = conn[3];
//      quad[nq][1] = conn[7];
//      quad[nq][2] = conn[8];
//      quad[nq][3] = conn[2];
//      nq++;
//      quad[nq][0] = conn[7];
//      quad[nq][1] = conn[0];
//      quad[nq][2] = conn[1];
//      quad[nq][3] = conn[8];
//      nq++;
//      tri[nt][0] = conn[1];
//      tri[nt][1] = conn[2];
//      tri[nt][2] = conn[8];
//      nt++;
//      break;
//    case 25: // 11001
//      quad[nq][0] = conn[3];
//      quad[nq][1] = conn[7];
//      quad[nq][2] = conn[8];
//      quad[nq][3] = conn[2];
//      nq++;
//      quad[nq][0] = conn[7];
//      quad[nq][1] = conn[0];
//      quad[nq][2] = conn[4];
//      quad[nq][3] = conn[8];
//      nq++;
//      quad[nq][0] = conn[4];
//      quad[nq][1] = conn[1];
//      quad[nq][2] = conn[2];
//      quad[nq][3] = conn[8];
//      nq++;
//      break;
//    case 26: // 11010
//      tri[nt][0] = conn[0];
//      tri[nt][1] = conn[1];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[1];
//      tri[nt][1] = conn[5];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[5];
//      tri[nt][1] = conn[2];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[2];
//      tri[nt][1] = conn[3];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[3];
//      tri[nt][1] = conn[7];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[7];
//      tri[nt][1] = conn[0];
//      tri[nt][2] = conn[8];
//      nt++;
//      break;
//    case 27: // 11011
//      quad[nq][0] = conn[7];
//      quad[nq][1] = conn[0];
//      quad[nq][2] = conn[4];
//      quad[nq][3] = conn[8];
//      nq++;
//      quad[nq][0] = conn[4];
//      quad[nq][1] = conn[1];
//      quad[nq][2] = conn[5];
//      quad[nq][3] = conn[8];
//      nq++;
//      tri[nt][0] = conn[5];
//      tri[nt][1] = conn[2];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[2];
//      tri[nt][1] = conn[3];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[3];
//      tri[nt][1] = conn[7];
//      tri[nt][2] = conn[8];
//      nt++;
//      break;
//    case 28: // 11100
//      quad[nq][0] = conn[2];
//      quad[nq][1] = conn[6];
//      quad[nq][2] = conn[8];
//      quad[nq][3] = conn[1];
//      nq++;
//      quad[nq][0] = conn[6];
//      quad[nq][1] = conn[3];
//      quad[nq][2] = conn[7];
//      quad[nq][3] = conn[8];
//      nq++;
//      quad[nq][0] = conn[7];
//      quad[nq][1] = conn[0];
//      quad[nq][2] = conn[1];
//      quad[nq][3] = conn[8];
//      nq++;
//      break;
//    case 29: // 11101
//      quad[nq][0] = conn[6];
//      quad[nq][1] = conn[3];
//      quad[nq][2] = conn[7];
//      quad[nq][3] = conn[8];
//      nq++;
//      quad[nq][0] = conn[7];
//      quad[nq][1] = conn[0];
//      quad[nq][2] = conn[4];
//      quad[nq][3] = conn[8];
//      nq++;
//      tri[nt][0] = conn[4];
//      tri[nt][1] = conn[1];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[1];
//      tri[nt][1] = conn[2];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[2];
//      tri[nt][1] = conn[6];
//      tri[nt][2] = conn[8];
//      nt++;
//      break;
//    case 30: // 11110
//      quad[nq][0] = conn[5];
//      quad[nq][1] = conn[2];
//      quad[nq][2] = conn[6];
//      quad[nq][3] = conn[8];
//      nq++;
//      quad[nq][0] = conn[6];
//      quad[nq][1] = conn[3];
//      quad[nq][2] = conn[7];
//      quad[nq][3] = conn[8];
//      nq++;
//      tri[nt][0] = conn[7];
//      tri[nt][1] = conn[0];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[0];
//      tri[nt][1] = conn[1];
//      tri[nt][2] = conn[8];
//      nt++;
//      tri[nt][0] = conn[1];
//      tri[nt][1] = conn[5];
//      tri[nt][2] = conn[8];
//      nt++;
//      break;
    case 31: // 11111
      quad[nq][0] = conn[0];
      quad[nq][1] = conn[4];
      quad[nq][2] = conn[8];
      quad[nq][3] = conn[7];
      nq++;
      quad[nq][0] = conn[4];
      quad[nq][1] = conn[1];
      quad[nq][2] = conn[5];
      quad[nq][3] = conn[8];
      nq++;
      quad[nq][0] = conn[7];
      quad[nq][1] = conn[8];
      quad[nq][2] = conn[6];
      quad[nq][3] = conn[3];
      nq++;
      quad[nq][0] = conn[8];
      quad[nq][1] = conn[5];
      quad[nq][2] = conn[2];
      quad[nq][3] = conn[6];
      nq++;
      break;
    default:
      if (my_rank == 0)
      {
      fprintf(out_f,"\nREFINE_QUAD: Quad marking not implemented, mask = %d",mask);
      fflush(out_f);
      }
      MPI_Abort(MPI_COMM_WORLD,0);
      exit(0);
      break;
  }
}

void tri_fill(int cdim, int &ntet, int tet[][4],
                        int &npyr, int pyr[][5],
                        int &npri, int pri[][6],
                        int &nhex, int hex[][8], int mid, int fn[])
{
  int c;
  int const dim = 6;
  int tri[dim][3], quad[dim][4];
  int nt, nq;
  long int trash = -1;
  //always -1 since refinement determined one level up
  refine_tri(fn, dim, nt, tri, nq, quad, trash);

  for (c=0; c < nt; c++)
  {
    tet[ntet][0] = tri[c][0];
    tet[ntet][1] = tri[c][1];
    tet[ntet][2] = tri[c][2];
    tet[ntet][3] = mid;
    ntet++;
  }

  for (c=0; c < nq; c++)
  {
    pyr[npyr][0] = quad[c][0];
    pyr[npyr][1] = quad[c][1];
    pyr[npyr][2] = quad[c][2];
    pyr[npyr][3] = quad[c][3];
    pyr[npyr][4] = mid;
    npyr++;
  }

  return;
}

void quad_fill(int cdim, int &ntet, int tet[][4],
                         int &npyr, int pyr[][5],
                         int &npri, int pri[][6],
                         int &nhex, int hex[][8], int mid, int fn[])
{
  int c;
  int const dim = 6;
  int tri[dim][3], quad[dim][4];
  int nt, nq;
  long int trash = -1;
  //always -1 since refinement determined one level up
  refine_quad(fn, dim, nt, tri, nq, quad, trash);

  for (c=0; c < nt; c++)
  {
    tet[ntet][0] = tri[c][0];
    tet[ntet][1] = tri[c][1];
    tet[ntet][2] = tri[c][2];
    tet[ntet][3] = mid;
    ntet++;
  }

  for (c=0; c < nq; c++)
  {
    pyr[npyr][0] = quad[c][0];
    pyr[npyr][1] = quad[c][1];
    pyr[npyr][2] = quad[c][2];
    pyr[npyr][3] = quad[c][3];
    pyr[npyr][4] = mid;
    npyr++;
  }

  return;
}

int refine_tet(int conn[10], int cdim, int &ntet, int tet[][4], int &npyr, int pyr[][5],
                                       int &npri, int pri[][6], int &nhex, int hex[][8], long int &refinetype)
{
  int flag = 1;
  static Linked_List hits;

  assert(cdim >= 10);

  ntet = npyr = npri = nhex = 0;

  long int mask;
  mask = 0;
  if (conn[4] >= 0) mask += 1;
  if (conn[5] >= 0) mask += 2;
  if (conn[6] >= 0) mask += 4;
  if (conn[7] >= 0) mask += 8;
  if (conn[8] >= 0) mask += 16;
  if (conn[9] >= 0) mask += 32;
  
  if (refinetype >= 0)
    mask = refinetype;
  else
    refinetype = mask;

  if (!hits.In_list(mask))
  {
    #ifdef _DEBUG
    //fprintf(debug_f,"\nREFINE_TET: mask = %ld",mask);
    //fflush(debug_f);
    #endif
    hits.Insert(mask);
  }

  switch (mask)
  {
    case  0: // 000000
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case  1: // 000001
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case  2: // 000010
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case  3: // 000011
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[3];
      npyr++;
      break;
    case  4: // 000100
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case  5: // 000101
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[0];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[4];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[3];
      npyr++;
      break;
    case  6: // 000110
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[3];
      npyr++;
      break;
    case  7: // 000111
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case  8: // 001000
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case  9: // 001001
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[2];
      ntet++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[2];
      npyr++;
      break;
    case 10: // 001010
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[3];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[3];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[7];
      ntet++;
      break;
    case 11: // 001011
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[5];
      npyr++;
      break;
    case 12: // 001100
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[1];
      ntet++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[1];
      npyr++;
      break;
    case 13: // 001101
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      pri[npri][0] = conn[4];
      pri[npri][1] = conn[6];
      pri[npri][2] = conn[7];
      pri[npri][3] = conn[1];
      pri[npri][4] = conn[2];
      pri[npri][5] = conn[3];
      npri++;
      break;
    case 14: // 001110
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[5];
      npyr++;
      break;
    case 15: // 001111
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[5];
      npyr++;
      break;
    case 16: // 010000
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[8];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case 17: // 010001
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[8];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[2];
      npyr++;
      break;
    case 18: // 010010
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[8];
      ntet++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[0];
      npyr++;
      break;
    case 19: // 010011
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[8];
      ntet++;
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[2];
      pri[npri][2] = conn[3];
      pri[npri][3] = conn[4];
      pri[npri][4] = conn[5];
      pri[npri][5] = conn[8];
      npri++;
      break;
    case 20: // 010100
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[8];
      ntet++;
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[8];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case 21: // 010101
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[8];
      npyr++;
      break;
    case 22: // 010110
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[8];
      npyr++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[6];
      npyr++;
      break;
    case 23: // 010111
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[8];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[8];
      ntet++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[6];
      npyr++;
      break;
    case 24: // 011000
      tet[ntet][0] = conn[2];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[2];
      npyr++;
      break;
    case 25: // 011001
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[8];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[2];
      ntet++;
      break;
    case 26: // 011010
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[7];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[7];
      npyr++;
      break;
    case 27: // 011011
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[8];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[8];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[7];
      npyr++;
      break;
    case 28: // 011100
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[8];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[8];
      npyr++;
      break;
    case 29: // 011101
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[0];
      ntet++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[8];
      npyr++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[8];
      npyr++;
      break;
    case 30: // 011110
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[6];
      pri[npri][2] = conn[7];
      pri[npri][3] = conn[1];
      pri[npri][4] = conn[5];
      pri[npri][5] = conn[8];
      npri++;
      pri[npri][0] = conn[6];
      pri[npri][1] = conn[5];
      pri[npri][2] = conn[2];
      pri[npri][3] = conn[7];
      pri[npri][4] = conn[8];
      pri[npri][5] = conn[3];
      npri++;
      break;
    case 31: // 011111
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[8];
      ntet++;
      pyr[npyr][0] = conn[8];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[4];
      npyr++;
      pri[npri][0] = conn[6];
      pri[npri][1] = conn[5];
      pri[npri][2] = conn[2];
      pri[npri][3] = conn[7];
      pri[npri][4] = conn[8];
      pri[npri][5] = conn[3];
      npri++;
      break;
    case 32: // 100000
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case 33: // 100001
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case 34: // 100010
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[0];
      npyr++;
      break;
    case 35: // 100011
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case 36: // 100100
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[1];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[1];
      npyr++;
      break;
    case 37: // 100101
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case 38: // 100110
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[3];
      pri[npri][2] = conn[1];
      pri[npri][3] = conn[6];
      pri[npri][4] = conn[9];
      pri[npri][5] = conn[5];
      npri++;
      break;
    case 39: // 100111
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[2];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[9];
      ntet++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case 40: // 101000
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[1];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[1];
      npyr++;
      break;
    case 41: // 101001
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[9];
      npyr++;
      break;
    case 42: // 101010
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[7];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[7];
      npyr++;
      break;
    case 43: // 101011
      pri[npri][0] = conn[1];
      pri[npri][1] = conn[5];
      pri[npri][2] = conn[4];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[9];
      pri[npri][5] = conn[7];
      npri++;
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[7];
      pri[npri][2] = conn[4];
      pri[npri][3] = conn[2];
      pri[npri][4] = conn[9];
      pri[npri][5] = conn[5];
      npri++;
      break;
    case 44: // 101100
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[2];
      tet[ntet][1] = conn[9];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[9];
      tet[ntet][1] = conn[3];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[9];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[1];
      ntet++;
      break;
    case 45: // 101101
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[9];
      ntet++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[9];
      npyr++;
      break;
    case 46: // 101110
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[9];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[7];
      npyr++;
      break;
    case 47: // 101111
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[9];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[6];
      npyr++;
      pri[npri][0] = conn[1];
      pri[npri][1] = conn[5];
      pri[npri][2] = conn[4];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[9];
      pri[npri][5] = conn[7];
      npri++;
      break;
    case 48: // 110000
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[9];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[0];
      ntet++;
      pyr[npyr][0] = conn[8];
      pyr[npyr][1] = conn[9];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[0];
      npyr++;
      break;
    case 49: // 110001
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case 50: // 110010
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[0];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[9];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[0];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[3];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[0];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[0];
      ntet++;
      break;
    case 51: // 110011
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[8];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[8];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[9];
      npyr++;
      break;
    case 52: // 110100
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[8];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[8];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[6];
      npyr++;
      break;
    case 53: // 110101
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[4];
      pri[npri][2] = conn[6];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[8];
      pri[npri][5] = conn[9];
      npri++;
      pri[npri][0] = conn[4];
      pri[npri][1] = conn[8];
      pri[npri][2] = conn[1];
      pri[npri][3] = conn[6];
      pri[npri][4] = conn[9];
      pri[npri][5] = conn[2];
      npri++;
      break;
    case 54: // 110110
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[9];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[8];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[8];
      npyr++;
      break;
    case 55: // 110111
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[8];
      ntet++;
      pyr[npyr][0] = conn[9];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[4];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[5];
      npyr++;
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[4];
      pri[npri][2] = conn[6];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[8];
      pri[npri][5] = conn[9];
      npri++;
      break;
    case 56: // 111000
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[3];
      ntet++;
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[1];
      pri[npri][2] = conn[2];
      pri[npri][3] = conn[7];
      pri[npri][4] = conn[8];
      pri[npri][5] = conn[9];
      npri++;
      break;
    case 57: // 111001
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[3];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[9];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case 58: // 111010
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[9];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[7];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[5];
      npyr++;
      break;
    case 59: // 111011
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[8];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[8];
      npyr++;
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[7];
      pri[npri][2] = conn[4];
      pri[npri][3] = conn[2];
      pri[npri][4] = conn[9];
      pri[npri][5] = conn[5];
      npri++;
      break;
    case 60: // 111100
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[6];
      npyr++;
      break;
    case 61: // 111101
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[7];
      npyr++;
      pri[npri][0] = conn[1];
      pri[npri][1] = conn[4];
      pri[npri][2] = conn[8];
      pri[npri][3] = conn[2];
      pri[npri][4] = conn[6];
      pri[npri][5] = conn[9];
      npri++;
      break;
    case 62: // 111110
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[3];
      ntet++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[8];
      pyr[npyr][4] = conn[9];
      npyr++;
      pri[npri][0] = conn[1];
      pri[npri][1] = conn[8];
      pri[npri][2] = conn[5];
      pri[npri][3] = conn[0];
      pri[npri][4] = conn[7];
      pri[npri][5] = conn[6];
      npri++;
      break;
    case 63: // 111111
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[8];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[9];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[5];
      ntet++;
      break;
    default:
    if (my_rank == 0)
      {
      fprintf(out_f,"\nREFINE_TET: Tet marking not implemented, mask = %ld",mask);
      fflush(out_f);
      }
      MPI_Abort(MPI_COMM_WORLD,0);
      exit(0);      
      break;
  }

  return(flag);

}

int refine_pyr(int conn[15], int cdim, int &ntet, int tet[][4], int &npyr, int pyr[][5],
                                       int &npri, int pri[][6], int &nhex, int hex[][8], long int &refinetype)
{
  int s;
  int fn[9];
  int flag = 1;
  static Linked_List hits;

  assert(cdim >= 10);

  ntet = npyr = npri = nhex = 0;
  long int mask;
  mask = 0;
  if (conn[ 5] >= 0) mask += 1;
  if (conn[ 6] >= 0) mask += 2;
  if (conn[ 7] >= 0) mask += 4;
  if (conn[ 8] >= 0) mask += 8;
  if (conn[ 9] >= 0) mask += 16;
  if (conn[10] >= 0) mask += 32;
  if (conn[11] >= 0) mask += 64;
  if (conn[12] >= 0) mask += 128;
  if (conn[13] >= 0) mask += 256;
  
  if (refinetype >= 0)
    mask = refinetype;
  else
    refinetype = mask;

  if (!hits.In_list(mask))
  {
    #ifdef _DEBUG
    //fprintf(debug_f,"\nREFINE_PYR: mask = %ld",mask);
    //fflush(debug_f);
    #endif
    hits.Insert(mask);
  }

  switch (mask)
  {
    case   0: // 000000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case   1: // 000000001
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case   2: // 000000010
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case   3: // 000000011
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case   4: // 000000100
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case   5: // 000000101
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case   6: // 000000110
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case   7: // 000000111
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case   8: // 000001000
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case   9: // 000001001
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case  10: // 000001010
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[8];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[8];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case  11: // 000001011
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[4];
      ntet++;
      pyr[npyr][0] = conn[8];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case  12: // 000001100
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case  13: // 000001101
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case  14: // 000001110
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[8];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case  15: // 000001111
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[2];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[8];
      pyr[npyr][4] = conn[4];
      npyr++;
      break;
    case  16: // 000010000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[9];
      npyr++;
      tet[ntet][0] = conn[9];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[9];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case  32: // 000100000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[10];
      npyr++;
      tet[ntet][0] = conn[10];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[10];
      tet[ntet][1] = conn[3];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case  48: // 000110000
      pyr[npyr][0] = conn[9];
      pyr[npyr][1] = conn[10];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[4];
      npyr++;
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[3];
      pri[npri][2] = conn[9];
      pri[npri][3] = conn[1];
      pri[npri][4] = conn[2];
      pri[npri][5] = conn[10];
      npri++;
      break;
    case  49: // 000110001
      pyr[npyr][0] = conn[9];
      pyr[npyr][1] = conn[10];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[10];
      pyr[npyr][1] = conn[9];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[5];
      npyr++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[10];
      ntet++;
      break;
    case  64: // 001000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[11];
      npyr++;
      tet[ntet][0] = conn[11];
      tet[ntet][1] = conn[3];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[11];
      tet[ntet][1] = conn[0];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case 96: // 001100000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[10];
      pyr[npyr][2] = conn[11];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[4];
      npyr++;
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[10];
      pri[npri][2] = conn[1];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[11];
      pri[npri][5] = conn[2];
      npri++;
      break;
    case  98: // 001100010
      pyr[npyr][0] = conn[10];
      pyr[npyr][1] = conn[11];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[11];
      pyr[npyr][1] = conn[10];
      pyr[npyr][2] = conn[0];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[6];
      npyr++;
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[10];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[11];
      ntet++;
      break;
    case 128: // 010000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[12];
      npyr++;
      tet[ntet][0] = conn[12];
      tet[ntet][1] = conn[0];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[12];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case 144: // 010010000
      pyr[npyr][0] = conn[9];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[12];
      pyr[npyr][4] = conn[4];
      npyr++;
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[9];
      pri[npri][2] = conn[1];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[12];
      pri[npri][5] = conn[2];
      npri++;
      break;
    case  152: // 010011000
      pyr[npyr][0] = conn[12];
      pyr[npyr][1] = conn[9];
      pyr[npyr][2] = conn[1];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[9];
      pyr[npyr][1] = conn[12];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[8];
      npyr++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[12];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[0];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[9];
      ntet++;
      break;
    case 192: // 011000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[11];
      pyr[npyr][3] = conn[12];
      pyr[npyr][4] = conn[4];
      npyr++;
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[3];
      pri[npri][2] = conn[12];
      pri[npri][3] = conn[1];
      pri[npri][4] = conn[2];
      pri[npri][5] = conn[11];
      npri++;
      break;
    case  196: // 011000100
      pyr[npyr][0] = conn[11];
      pyr[npyr][1] = conn[12];
      pyr[npyr][2] = conn[0];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[12];
      pyr[npyr][1] = conn[11];
      pyr[npyr][2] = conn[1];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[7];
      npyr++;
      tet[ntet][0] = conn[2];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[11];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[3];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[12];
      ntet++;
      break;
    case 240: // 011110000
      pyr[npyr][0] = conn[9];
      pyr[npyr][1] = conn[10];
      pyr[npyr][2] = conn[11];
      pyr[npyr][3] = conn[12];
      pyr[npyr][4] = conn[4];
      npyr++;
      hex[nhex][0] = conn[0];
      hex[nhex][1] = conn[1];
      hex[nhex][2] = conn[2];
      hex[nhex][3] = conn[3];
      hex[nhex][4] = conn[9];
      hex[nhex][5] = conn[10];
      hex[nhex][6] = conn[11];
      hex[nhex][7] = conn[12];
      nhex++;
      break;
    case 256: // 100000000
      tet[ntet][0] = conn[13];
      tet[ntet][1] = conn[0];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[13];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[13];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[13];
      tet[ntet][1] = conn[3];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case 511: // 111111111
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[13];
      pyr[npyr][3] = conn[8];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[13];
      pyr[npyr][4] = conn[10];
      npyr++;
      pyr[npyr][0] = conn[8];
      pyr[npyr][1] = conn[13];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[12];
      npyr++;
      pyr[npyr][0] = conn[13];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[11];
      npyr++;
      pyr[npyr][0] = conn[9];
      pyr[npyr][1] = conn[10];
      pyr[npyr][2] = conn[11];
      pyr[npyr][3] = conn[12];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[12];
      pyr[npyr][1] = conn[11];
      pyr[npyr][2] = conn[10];
      pyr[npyr][3] = conn[9];
      pyr[npyr][4] = conn[13];
      npyr++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[10];
      tet[ntet][2] = conn[13];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[11];
      tet[ntet][2] = conn[13];
      tet[ntet][3] = conn[10];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[12];
      tet[ntet][2] = conn[13];
      tet[ntet][3] = conn[11];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[9];
      tet[ntet][2] = conn[13];
      tet[ntet][3] = conn[12];
      ntet++;
      break;
    default:
      if (!hits.In_list(mask))
      {
        #ifdef _DEBUG
        //fprintf(debug_f,"\nREFINE_PYR: Pyr marking not implemented, mask = %ld",mask);
        //fprintf(debug_f,"\n            Using general quad-fill with faces.");
        //fflush(debug_f);
        #endif
        hits.Insert(mask);
      }
      if (conn[14] < 0)
        flag = 0;
      else
      {
        for (s=0; s < 5; s++)
        {
          switch (s)
          {
            case 0:
              fn[0] = conn[ 0];
              fn[1] = conn[ 1];
              fn[2] = conn[ 2];
              fn[3] = conn[ 3];
              fn[4] = conn[ 5];
              fn[5] = conn[ 6];
              fn[6] = conn[ 7];
              fn[7] = conn[ 8];
              fn[8] = conn[13];
              break;
            case 1:
              fn[0] = conn[ 0];
              fn[1] = conn[ 4];
              fn[2] = conn[ 1];
              fn[3] = conn[ 9];
              fn[4] = conn[10];
              fn[5] = conn[ 5];
              break;
            case 2:
              fn[0] = conn[ 1];
              fn[1] = conn[ 4];
              fn[2] = conn[ 2];
              fn[3] = conn[10];
              fn[4] = conn[11];
              fn[5] = conn[ 6];
              break;
            case 3:
              fn[0] = conn[ 2];
              fn[1] = conn[ 4];
              fn[2] = conn[ 3];
              fn[3] = conn[11];
              fn[4] = conn[12];
              fn[5] = conn[ 7];
              break;
            case 4:
              fn[0] = conn[ 3];
              fn[1] = conn[ 4];
              fn[2] = conn[ 0];
              fn[3] = conn[12];
              fn[4] = conn[ 9];
              fn[5] = conn[ 8];
              break;
          }
          if (s == 0)
            quad_fill(cdim, ntet, tet, npyr, pyr, npri, pri, nhex, hex, conn[14], fn);
          else
            tri_fill(cdim, ntet, tet, npyr, pyr, npri, pri, nhex, hex, conn[14], fn);
        }
      }
      break;
  }

  return(flag);

}

int refine_pri(int conn[19], int cdim, int &ntet, int tet[][4], int &npyr, int pyr[][5],
                                       int &npri, int pri[][6], int &nhex, int hex[][8], long int &refinetype)
{
  int s;
  int fn[9];
  int flag = 1;
  static Linked_List hits;

  assert(cdim >= 10);

  ntet = npyr = npri = nhex = 0;
  long int mask;
  mask = 0;
  if (conn[ 6] >= 0) mask += 1;
  if (conn[ 7] >= 0) mask += 2;
  if (conn[ 8] >= 0) mask += 4;
  if (conn[ 9] >= 0) mask += 8;
  if (conn[10] >= 0) mask += 16;
  if (conn[11] >= 0) mask += 32;
  if (conn[12] >= 0) mask += 64;
  if (conn[13] >= 0) mask += 128;
  if (conn[14] >= 0) mask += 256;
  if (conn[15] >= 0) mask += 512;
  if (conn[16] >= 0) mask += 1024;
  if (conn[17] >= 0) mask += 2048;
  
  if (refinetype >= 0)
    mask = refinetype;
  else
    refinetype = mask;

  if (!hits.In_list(mask))
  {
    #ifdef _DEBUG
    //fprintf(debug_f,"\nREFINE_PRI: mask = %ld",mask);
    //fflush(debug_f);
    #endif
    hits.Insert(mask);
  }

  switch (mask)
  {
    case   0: // 000000000000
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[1];
      pri[npri][2] = conn[2];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[4];
      pri[npri][5] = conn[5];
      npri++;
      break;
    case   1: // 000000000001
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[6];
      npyr++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[6];
      ntet++;
      break;
    case   2: // 000000000010
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[0];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[7];
      npyr++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[7];
      ntet++;
      break;
    case   4: // 000000000100
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[8];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[4];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[8];
      npyr++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[8];
      ntet++;
      break;
    case   8: // 000000001000
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[9];
      npyr++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[9];
      ntet++;
      break;
    case  16: // 000000010000
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[10];
      npyr++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[10];
      ntet++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[10];
      ntet++;
      break;
    case  32: // 000000100000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[4];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[11];
      npyr++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[11];
      ntet++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[11];
      ntet++;
      break;
    case  56: // 000000111000
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[1];
      pri[npri][2] = conn[2];
      pri[npri][3] = conn[9];
      pri[npri][4] = conn[10];
      pri[npri][5] = conn[11];
      npri++;
      pri[npri][0] = conn[9];
      pri[npri][1] = conn[10];
      pri[npri][2] = conn[11];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[4];
      pri[npri][5] = conn[5];
      npri++;
      break;
    case  64: // 000001000000
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[12];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[12];
      npyr++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[12];
      ntet++;
      break;
    case  65: // 000001000001
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[6];
      pri[npri][2] = conn[2];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[12];
      pri[npri][5] = conn[5];
      npri++;
      pri[npri][0] = conn[6];
      pri[npri][1] = conn[1];
      pri[npri][2] = conn[2];
      pri[npri][3] = conn[12];
      pri[npri][4] = conn[4];
      pri[npri][5] = conn[5];
      npri++;
      break;
    case  97: // 000001100001
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[12];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[11];
      npyr++;
      pyr[npyr][0] = conn[6];
      pyr[npyr][1] = conn[12];
      pyr[npyr][2] = conn[4];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[11];
      npyr++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[6];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[11];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[11];
      ntet++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[12];
      tet[ntet][3] = conn[11];
      ntet++;
      tet[ntet][0] = conn[12];
      tet[ntet][1] = conn[5];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[11];
      ntet++;
      break;
    case 128: // 000010000000
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[13];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[4];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[13];
      npyr++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[13];
      ntet++;
      break;
    case 130: // 000010000010
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[1];
      pri[npri][2] = conn[7];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[4];
      pri[npri][5] = conn[13];
      npri++;
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[7];
      pri[npri][2] = conn[2];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[13];
      pri[npri][5] = conn[5];
      npri++;
      break;
    case 138: // 000010001010
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[13];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[13];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[9];
      npyr++;
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[7];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[2];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[3];
      tet[ntet][2] = conn[13];
      tet[ntet][3] = conn[9];
      ntet++;
      tet[ntet][0] = conn[13];
      tet[ntet][1] = conn[3];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[9];
      ntet++;
      break;
    case 195: // 000011000011
      pri[npri][0] = conn[6];
      pri[npri][1] = conn[1];
      pri[npri][2] = conn[7];
      pri[npri][3] = conn[12];
      pri[npri][4] = conn[4];
      pri[npri][5] = conn[13];
      npri++;
      hex[nhex][0] = conn[0];
      hex[nhex][1] = conn[6];
      hex[nhex][2] = conn[7];
      hex[nhex][3] = conn[2];
      hex[nhex][4] = conn[3];
      hex[nhex][5] = conn[12];
      hex[nhex][6] = conn[13];
      hex[nhex][7] = conn[5];
      nhex++;
      break;
    case 256: // 000100000000
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[14];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[4];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[14];
      npyr++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[1];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[14];
      ntet++;
      break;
    case 260: // 000100000100
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[1];
      pri[npri][2] = conn[8];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[4];
      pri[npri][5] = conn[14];
      npri++;
      pri[npri][0] = conn[8];
      pri[npri][1] = conn[1];
      pri[npri][2] = conn[2];
      pri[npri][3] = conn[14];
      pri[npri][4] = conn[4];
      pri[npri][5] = conn[5];
      npri++;
      break;
    case 276: // 000100010100
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[14];
      pyr[npyr][3] = conn[8];
      pyr[npyr][4] = conn[10];
      npyr++;
      pyr[npyr][0] = conn[8];
      pyr[npyr][1] = conn[14];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[10];
      npyr++;
      tet[ntet][0] = conn[2];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[10];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[0];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[10];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[14];
      tet[ntet][3] = conn[10];
      ntet++;
      tet[ntet][0] = conn[14];
      tet[ntet][1] = conn[4];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[10];
      ntet++;
      break;
    case 325: // 000101000101
      pri[npri][0] = conn[8];
      pri[npri][1] = conn[0];
      pri[npri][2] = conn[6];
      pri[npri][3] = conn[14];
      pri[npri][4] = conn[3];
      pri[npri][5] = conn[12];
      npri++;
      hex[nhex][0] = conn[1];
      hex[nhex][1] = conn[2];
      hex[nhex][2] = conn[8];
      hex[nhex][3] = conn[6];
      hex[nhex][4] = conn[4];
      hex[nhex][5] = conn[5];
      hex[nhex][6] = conn[14];
      hex[nhex][7] = conn[12];
      nhex++;
      break;
    case 390: // 000110000110
      pri[npri][0] = conn[7];
      pri[npri][1] = conn[2];
      pri[npri][2] = conn[8];
      pri[npri][3] = conn[13];
      pri[npri][4] = conn[5];
      pri[npri][5] = conn[14];
      npri++;
      hex[nhex][0] = conn[0];
      hex[nhex][1] = conn[1];
      hex[nhex][2] = conn[7];
      hex[nhex][3] = conn[8];
      hex[nhex][4] = conn[3];
      hex[nhex][5] = conn[4];
      hex[nhex][6] = conn[13];
      hex[nhex][7] = conn[14];
      nhex++;
      break;
    case 455: // 000111000111
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[6];
      pri[npri][2] = conn[8];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[12];
      pri[npri][5] = conn[14];
      npri++;
      pri[npri][0] = conn[1];
      pri[npri][1] = conn[7];
      pri[npri][2] = conn[6];
      pri[npri][3] = conn[4];
      pri[npri][4] = conn[13];
      pri[npri][5] = conn[12];
      npri++;
      pri[npri][0] = conn[2];
      pri[npri][1] = conn[8];
      pri[npri][2] = conn[7];
      pri[npri][3] = conn[5];
      pri[npri][4] = conn[14];
      pri[npri][5] = conn[13];
      npri++;
      pri[npri][0] = conn[6];
      pri[npri][1] = conn[7];
      pri[npri][2] = conn[8];
      pri[npri][3] = conn[12];
      pri[npri][4] = conn[13];
      pri[npri][5] = conn[14];
      npri++;
      break;
    case 4095: // 111111111111
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[6];
      pri[npri][2] = conn[8];
      pri[npri][3] = conn[9];
      pri[npri][4] = conn[15];
      pri[npri][5] = conn[17];
      npri++;
      pri[npri][0] = conn[1];
      pri[npri][1] = conn[7];
      pri[npri][2] = conn[6];
      pri[npri][3] = conn[10];
      pri[npri][4] = conn[16];
      pri[npri][5] = conn[15];
      npri++;
      pri[npri][0] = conn[2];
      pri[npri][1] = conn[8];
      pri[npri][2] = conn[7];
      pri[npri][3] = conn[11];
      pri[npri][4] = conn[17];
      pri[npri][5] = conn[16];
      npri++;
      pri[npri][0] = conn[6];
      pri[npri][1] = conn[7];
      pri[npri][2] = conn[8];
      pri[npri][3] = conn[15];
      pri[npri][4] = conn[16];
      pri[npri][5] = conn[17];
      npri++;
      pri[npri][0] = conn[9];
      pri[npri][1] = conn[15];
      pri[npri][2] = conn[17];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[12];
      pri[npri][5] = conn[14];
      npri++;
      pri[npri][0] = conn[10];
      pri[npri][1] = conn[16];
      pri[npri][2] = conn[15];
      pri[npri][3] = conn[4];
      pri[npri][4] = conn[13];
      pri[npri][5] = conn[12];
      npri++;
      pri[npri][0] = conn[11];
      pri[npri][1] = conn[17];
      pri[npri][2] = conn[16];
      pri[npri][3] = conn[5];
      pri[npri][4] = conn[14];
      pri[npri][5] = conn[13];
      npri++;
      pri[npri][0] = conn[15];
      pri[npri][1] = conn[16];
      pri[npri][2] = conn[17];
      pri[npri][3] = conn[12];
      pri[npri][4] = conn[13];
      pri[npri][5] = conn[14];
      npri++;
      break;
    default:
      if (!hits.In_list(mask))
      {
        #ifdef _DEBUG
        //fprintf(debug_f,"\nREFINE_PRI: Pri marking not implemented, mask = %ld",mask);
        //fflush(debug_f);
        #endif
        hits.Insert(mask);
      }
      if (conn[18] < 0)
        flag = 0;
      else
      {
        for (s=0; s < 5; s++)
        {
          switch (s)
          {
            case 0:
              fn[0] = conn[ 0];
              fn[1] = conn[ 3];
              fn[2] = conn[ 4];
              fn[3] = conn[ 1];
              fn[4] = conn[ 9];
              fn[5] = conn[12];
              fn[6] = conn[10];
              fn[7] = conn[ 6];
              fn[8] = conn[15];
              break;
            case 1:
              fn[0] = conn[ 1];
              fn[1] = conn[ 4];
              fn[2] = conn[ 5];
              fn[3] = conn[ 2];
              fn[4] = conn[10];
              fn[5] = conn[13];
              fn[6] = conn[11];
              fn[7] = conn[ 7];
              fn[8] = conn[16];
              break;
            case 2:
              fn[0] = conn[ 2];
              fn[1] = conn[ 5];
              fn[2] = conn[ 3];
              fn[3] = conn[ 0];
              fn[4] = conn[11];
              fn[5] = conn[14];
              fn[6] = conn[ 9];
              fn[7] = conn[ 8];
              fn[8] = conn[17];
              break;
            case 3:
              fn[0] = conn[ 0];
              fn[1] = conn[ 1];
              fn[2] = conn[ 2];
              fn[3] = conn[ 6];
              fn[4] = conn[ 7];
              fn[5] = conn[ 8];
              break;
            case 4:
              fn[0] = conn[ 5];
              fn[1] = conn[ 4];
              fn[2] = conn[ 3];
              fn[3] = conn[13];
              fn[4] = conn[12];
              fn[5] = conn[14];
              break;
          }
          if (s < 3)
            quad_fill(cdim, ntet, tet, npyr, pyr, npri, pri, nhex, hex, conn[18], fn);
          else
            tri_fill(cdim, ntet, tet, npyr, pyr, npri, pri, nhex, hex, conn[18], fn);
        }
      }
      break;
  }

  return(flag);

}

int refine_hex(int conn[27], int cdim, int &ntet, int tet[][4], int &npyr, int pyr[][5],
                                       int &npri, int pri[][6], int &nhex, int hex[][8], long int &refinetype)
{
  int s;
  int fn[9];
  int flag = 1;
  static Linked_List hits;

  assert(cdim >= 24);

  ntet = npyr = npri = nhex = 0;
  long int mask;
  mask = 0;
  if (conn[ 8] >= 0) mask += 1;
  if (conn[ 9] >= 0) mask += 2;
  if (conn[10] >= 0) mask += 4;
  if (conn[11] >= 0) mask += 8;
  if (conn[12] >= 0) mask += 16;
  if (conn[13] >= 0) mask += 32;
  if (conn[14] >= 0) mask += 64;
  if (conn[15] >= 0) mask += 128;
  if (conn[16] >= 0) mask += 256;
  if (conn[17] >= 0) mask += 512;
  if (conn[18] >= 0) mask += 1024;
  if (conn[19] >= 0) mask += 2048;
  if (conn[20] >= 0) mask += 4096;
  if (conn[21] >= 0) mask += 8192;
  if (conn[22] >= 0) mask += 16384;
  if (conn[23] >= 0) mask += 32768;
  if (conn[24] >= 0) mask += 65536;
  if (conn[25] >= 0) mask += 131072;
  
  if (refinetype >= 0)
    mask = refinetype;
  else
    refinetype = mask;

  if (!hits.In_list(mask))
  {
    #ifdef _DEBUG
    //fprintf(debug_f,"\nREFINE_HEX: mask = %ld",mask);
    //fflush(debug_f);
    #endif
    hits.Insert(mask);
  }

  switch (mask)
  {
    case      0: // 000000000000000000
      hex[nhex][0] = conn[0];
      hex[nhex][1] = conn[1];
      hex[nhex][2] = conn[2];
      hex[nhex][3] = conn[3];
      hex[nhex][4] = conn[4];
      hex[nhex][5] = conn[5];
      hex[nhex][6] = conn[6];
      hex[nhex][7] = conn[7];
      nhex++;
      break;
    case      1: // 000000000000000001
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[8];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[8];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[8];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[8];
      npyr++;
      break;
    case      2: // 000000000000000010
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[9];
      npyr++;
      break;
    case      4: // 000000000000000100
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[10];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[10];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[10];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[10];
      npyr++;
      break;
    case      8: // 000000000000001000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[11];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[11];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[11];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[11];
      npyr++;
      break;
    case     16: // 000000000000010000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[12];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[12];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[12];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[12];
      npyr++;
      break;
    case     25: // 000000000000011001
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[8];
      npyr++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[11];
      npyr++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[12];
      npyr++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[12];
      tet[ntet][2] = conn[11];
      tet[ntet][3] = conn[0];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[11];
      tet[ntet][2] = conn[12];
      tet[ntet][3] = conn[6];
      ntet++;
      tet[ntet][0] = conn[2];
      tet[ntet][1] = conn[11];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[6];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[12];
      tet[ntet][2] = conn[11];
      tet[ntet][3] = conn[6];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[12];
      tet[ntet][3] = conn[6];
      ntet++;
      break;
    case     32: // 000000000000100000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[13];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[13];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[13];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[13];
      npyr++;
      break;
    case     35: // 000000000000100011
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[4];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[8];
      npyr++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[13];
      npyr++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[9];
      tet[ntet][2] = conn[13];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[13];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[8];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[13];
      tet[ntet][2] = conn[8];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[9];
      tet[ntet][2] = conn[13];
      tet[ntet][3] = conn[7];
      ntet++;
      break;
    case     64: // 000000000001000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[14];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[14];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[14];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[14];
      npyr++;
      break;
    case     70: // 000000000001000110
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[4];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[10];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[9];
      npyr++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[14];
      npyr++;
      tet[ntet][0] = conn[9];
      tet[ntet][1] = conn[10];
      tet[ntet][2] = conn[14];
      tet[ntet][3] = conn[2];
      ntet++;
      tet[ntet][0] = conn[9];
      tet[ntet][1] = conn[14];
      tet[ntet][2] = conn[10];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[9];
      tet[ntet][2] = conn[10];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[14];
      tet[ntet][2] = conn[9];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[10];
      tet[ntet][2] = conn[14];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case    128: // 000000000010000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[15];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[15];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[15];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[15];
      npyr++;
      break;
    case    140: // 000000000010001100
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[11];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[10];
      npyr++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[15];
      npyr++;
      tet[ntet][0] = conn[10];
      tet[ntet][1] = conn[11];
      tet[ntet][2] = conn[15];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[10];
      tet[ntet][1] = conn[15];
      tet[ntet][2] = conn[11];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[10];
      tet[ntet][2] = conn[11];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[15];
      tet[ntet][2] = conn[10];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[11];
      tet[ntet][2] = conn[15];
      tet[ntet][3] = conn[5];
      ntet++;
      break;
    case    240: // 000000000011110000
      hex[nhex][0] = conn[0];
      hex[nhex][1] = conn[1];
      hex[nhex][2] = conn[2];
      hex[nhex][3] = conn[3];
      hex[nhex][4] = conn[12];
      hex[nhex][5] = conn[13];
      hex[nhex][6] = conn[14];
      hex[nhex][7] = conn[15];
      nhex++;
      hex[nhex][0] = conn[12];
      hex[nhex][1] = conn[13];
      hex[nhex][2] = conn[14];
      hex[nhex][3] = conn[15];
      hex[nhex][4] = conn[4];
      hex[nhex][5] = conn[5];
      hex[nhex][6] = conn[6];
      hex[nhex][7] = conn[7];
      nhex++;
      break;
    case    256: // 000000000100000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[16];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[16];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[16];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[16];
      npyr++;
      break;
    case    512: // 000000001000000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[17];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[17];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[17];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[17];
      npyr++;
      break;
    case    800: // 000000001100100000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[13];
      npyr++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[17];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[4];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[16];
      npyr++;
      tet[ntet][0] = conn[13];
      tet[ntet][1] = conn[17];
      tet[ntet][2] = conn[16];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[13];
      tet[ntet][1] = conn[16];
      tet[ntet][2] = conn[17];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[16];
      tet[ntet][2] = conn[13];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[2];
      tet[ntet][1] = conn[13];
      tet[ntet][2] = conn[17];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[7];
      tet[ntet][1] = conn[17];
      tet[ntet][2] = conn[16];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case   1024: // 000000010000000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[18];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[18];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[18];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[18];
      npyr++;
      break;
    case   1285: // 000000010100000101
      hex[nhex][0] = conn[0];
      hex[nhex][1] = conn[8];
      hex[nhex][2] = conn[10];
      hex[nhex][3] = conn[3];
      hex[nhex][4] = conn[4];
      hex[nhex][5] = conn[16];
      hex[nhex][6] = conn[18];
      hex[nhex][7] = conn[7];
      nhex++;
      hex[nhex][0] = conn[8];
      hex[nhex][1] = conn[1];
      hex[nhex][2] = conn[2];
      hex[nhex][3] = conn[10];
      hex[nhex][4] = conn[16];
      hex[nhex][5] = conn[5];
      hex[nhex][6] = conn[6];
      hex[nhex][7] = conn[18];
      nhex++;
      break;
    case   1600: // 000000011001000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[14];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[4];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[18];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[17];
      npyr++;
      tet[ntet][0] = conn[14];
      tet[ntet][1] = conn[18];
      tet[ntet][2] = conn[17];
      tet[ntet][3] = conn[6];
      ntet++;
      tet[ntet][0] = conn[14];
      tet[ntet][1] = conn[17];
      tet[ntet][2] = conn[18];
      tet[ntet][3] = conn[0];
      ntet++;
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[17];
      tet[ntet][2] = conn[14];
      tet[ntet][3] = conn[0];
      ntet++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[14];
      tet[ntet][2] = conn[18];
      tet[ntet][3] = conn[0];
      ntet++;
      tet[ntet][0] = conn[4];
      tet[ntet][1] = conn[18];
      tet[ntet][2] = conn[17];
      tet[ntet][3] = conn[0];
      ntet++;
      break;
    case   2048: // 000000100000000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[19];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[19];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[19];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[19];
      npyr++;
      break;
    case   2320: // 000000100100010000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[12];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[16];
      npyr++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[19];
      npyr++;
      tet[ntet][0] = conn[12];
      tet[ntet][1] = conn[16];
      tet[ntet][2] = conn[19];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[12];
      tet[ntet][1] = conn[19];
      tet[ntet][2] = conn[16];
      tet[ntet][3] = conn[2];
      ntet++;
      tet[ntet][0] = conn[1];
      tet[ntet][1] = conn[12];
      tet[ntet][2] = conn[16];
      tet[ntet][3] = conn[2];
      ntet++;
      tet[ntet][0] = conn[3];
      tet[ntet][1] = conn[19];
      tet[ntet][2] = conn[12];
      tet[ntet][3] = conn[2];
      ntet++;
      tet[ntet][0] = conn[6];
      tet[ntet][1] = conn[16];
      tet[ntet][2] = conn[19];
      tet[ntet][3] = conn[2];
      ntet++;
      break;
    case   2570: // 000000101000001010
      hex[nhex][0] = conn[0];
      hex[nhex][1] = conn[1];
      hex[nhex][2] = conn[9];
      hex[nhex][3] = conn[11];
      hex[nhex][4] = conn[4];
      hex[nhex][5] = conn[5];
      hex[nhex][6] = conn[17];
      hex[nhex][7] = conn[19];
      nhex++;
      hex[nhex][0] = conn[11];
      hex[nhex][1] = conn[9];
      hex[nhex][2] = conn[2];
      hex[nhex][3] = conn[3];
      hex[nhex][4] = conn[19];
      hex[nhex][5] = conn[17];
      hex[nhex][6] = conn[6];
      hex[nhex][7] = conn[7];
      nhex++;
      break;
    case   3200: // 000000110010000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[15];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[19];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[18];
      npyr++;
      tet[ntet][0] = conn[15];
      tet[ntet][1] = conn[19];
      tet[ntet][2] = conn[18];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[15];
      tet[ntet][1] = conn[18];
      tet[ntet][2] = conn[19];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[0];
      tet[ntet][1] = conn[15];
      tet[ntet][2] = conn[19];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[2];
      tet[ntet][1] = conn[18];
      tet[ntet][2] = conn[15];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[5];
      tet[ntet][1] = conn[19];
      tet[ntet][2] = conn[18];
      tet[ntet][3] = conn[1];
      ntet++;
      break;
    case   4096: // 000001000000000000
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[20];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[20];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[20];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[20];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[20];
      npyr++;
      break;
    case   4111: // 000001000000001111
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[20];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[20];
      pyr[npyr][3] = conn[11];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[8];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[20];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[11];
      pyr[npyr][1] = conn[20];
      pyr[npyr][2] = conn[10];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[20];
      pyr[npyr][1] = conn[9];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[10];
      pyr[npyr][4] = conn[6];
      npyr++;
      tet[ntet][0] = conn[11];
      tet[ntet][1] = conn[20];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[20];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[9];
      tet[ntet][1] = conn[20];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[6];
      ntet++;
      tet[ntet][0] = conn[10];
      tet[ntet][1] = conn[20];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      break;
    case   8192: // 000010000000000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[21];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[21];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[21];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[21];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[21];
      npyr++;
      break;
    case   8497: // 000010000100110001
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[21];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[12];
      pyr[npyr][2] = conn[21];
      pyr[npyr][3] = conn[8];
      pyr[npyr][4] = conn[3];
      npyr++;
      pyr[npyr][0] = conn[8];
      pyr[npyr][1] = conn[21];
      pyr[npyr][2] = conn[13];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[2];
      npyr++;
      pyr[npyr][0] = conn[12];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[16];
      pyr[npyr][3] = conn[21];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[21];
      pyr[npyr][1] = conn[16];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[13];
      pyr[npyr][4] = conn[6];
      npyr++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[21];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[13];
      tet[ntet][1] = conn[21];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[2];
      ntet++;
      tet[ntet][0] = conn[16];
      tet[ntet][1] = conn[21];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[6];
      ntet++;
      tet[ntet][0] = conn[12];
      tet[ntet][1] = conn[21];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[7];
      ntet++;
      break;
    case  12607: // 000011000100111111
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[11];
      pri[npri][2] = conn[12];
      pri[npri][3] = conn[8];
      pri[npri][4] = conn[20];
      pri[npri][5] = conn[21];
      npri++;
      pri[npri][0] = conn[8];
      pri[npri][1] = conn[20];
      pri[npri][2] = conn[21];
      pri[npri][3] = conn[1];
      pri[npri][4] = conn[9];
      pri[npri][5] = conn[13];
      npri++;
      pyr[npyr][0] = conn[11];
      pyr[npyr][1] = conn[20];
      pyr[npyr][2] = conn[10];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[12];
      pyr[npyr][1] = conn[21];
      pyr[npyr][2] = conn[20];
      pyr[npyr][3] = conn[11];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[16];
      pyr[npyr][2] = conn[21];
      pyr[npyr][3] = conn[12];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[20];
      pyr[npyr][1] = conn[9];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[10];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[21];
      pyr[npyr][1] = conn[13];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[20];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[16];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[13];
      pyr[npyr][3] = conn[21];
      pyr[npyr][4] = conn[6];
      npyr++;
      tet[ntet][0] = conn[10];
      tet[ntet][1] = conn[20];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[20];
      tet[ntet][1] = conn[21];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[21];
      tet[ntet][1] = conn[16];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[7];
      ntet++;
      break;
    case  16384: // 000100000000000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[22];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[22];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[22];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[22];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[22];
      npyr++;
      break;
    case  16994: // 000100001001100010
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[22];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[13];
      pyr[npyr][2] = conn[22];
      pyr[npyr][3] = conn[9];
      pyr[npyr][4] = conn[0];
      npyr++;
      pyr[npyr][0] = conn[13];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[17];
      pyr[npyr][3] = conn[22];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[9];
      pyr[npyr][1] = conn[22];
      pyr[npyr][2] = conn[14];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[3];
      npyr++;
      pyr[npyr][0] = conn[22];
      pyr[npyr][1] = conn[17];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[14];
      pyr[npyr][4] = conn[7];
      npyr++;
      tet[ntet][0] = conn[9];
      tet[ntet][1] = conn[22];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[0];
      ntet++;
      tet[ntet][0] = conn[13];
      tet[ntet][1] = conn[22];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[17];
      tet[ntet][1] = conn[22];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[14];
      tet[ntet][1] = conn[22];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case  21103: // 000101001001101111
      pri[npri][0] = conn[1];
      pri[npri][1] = conn[8];
      pri[npri][2] = conn[13];
      pri[npri][3] = conn[9];
      pri[npri][4] = conn[20];
      pri[npri][5] = conn[22];
      npri++;
      pri[npri][0] = conn[9];
      pri[npri][1] = conn[20];
      pri[npri][2] = conn[22];
      pri[npri][3] = conn[2];
      pri[npri][4] = conn[10];
      pri[npri][5] = conn[14];
      npri++;
      pyr[npyr][0] = conn[8];
      pyr[npyr][1] = conn[20];
      pyr[npyr][2] = conn[11];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[13];
      pyr[npyr][1] = conn[22];
      pyr[npyr][2] = conn[20];
      pyr[npyr][3] = conn[8];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[17];
      pyr[npyr][2] = conn[22];
      pyr[npyr][3] = conn[13];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[20];
      pyr[npyr][1] = conn[10];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[11];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[22];
      pyr[npyr][1] = conn[14];
      pyr[npyr][2] = conn[10];
      pyr[npyr][3] = conn[20];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[17];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[14];
      pyr[npyr][3] = conn[22];
      pyr[npyr][4] = conn[7];
      npyr++;
      tet[ntet][0] = conn[11];
      tet[ntet][1] = conn[20];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[20];
      tet[ntet][1] = conn[22];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[22];
      tet[ntet][1] = conn[17];
      tet[ntet][2] = conn[7];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case  25459: // 000110001101110011
      pri[npri][0] = conn[1];
      pri[npri][1] = conn[9];
      pri[npri][2] = conn[8];
      pri[npri][3] = conn[13];
      pri[npri][4] = conn[22];
      pri[npri][5] = conn[21];
      npri++;
      pri[npri][0] = conn[13];
      pri[npri][1] = conn[22];
      pri[npri][2] = conn[21];
      pri[npri][3] = conn[5];
      pri[npri][4] = conn[17];
      pri[npri][5] = conn[16];
      npri++;
      pyr[npyr][0] = conn[16];
      pyr[npyr][1] = conn[21];
      pyr[npyr][2] = conn[12];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[17];
      pyr[npyr][1] = conn[22];
      pyr[npyr][2] = conn[21];
      pyr[npyr][3] = conn[16];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[6];
      pyr[npyr][1] = conn[14];
      pyr[npyr][2] = conn[22];
      pyr[npyr][3] = conn[17];
      pyr[npyr][4] = conn[7];
      npyr++;
      pyr[npyr][0] = conn[21];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[0];
      pyr[npyr][3] = conn[12];
      pyr[npyr][4] = conn[3];
      npyr++;
      pyr[npyr][0] = conn[22];
      pyr[npyr][1] = conn[9];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[21];
      pyr[npyr][4] = conn[3];
      npyr++;
      pyr[npyr][0] = conn[14];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[22];
      pyr[npyr][4] = conn[3];
      npyr++;
      tet[ntet][0] = conn[12];
      tet[ntet][1] = conn[21];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[21];
      tet[ntet][1] = conn[22];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[7];
      ntet++;
      tet[ntet][0] = conn[22];
      tet[ntet][1] = conn[14];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[7];
      ntet++;
      break;
    case  32768: // 001000000000000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[23];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[23];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[23];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[23];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[23];
      npyr++;
      break;
    case  33988: // 001000010011000100
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[23];
      npyr++;
      pyr[npyr][0] = conn[2];
      pyr[npyr][1] = conn[14];
      pyr[npyr][2] = conn[23];
      pyr[npyr][3] = conn[10];
      pyr[npyr][4] = conn[1];
      npyr++;
      pyr[npyr][0] = conn[14];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[18];
      pyr[npyr][3] = conn[23];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[10];
      pyr[npyr][1] = conn[23];
      pyr[npyr][2] = conn[15];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[0];
      npyr++;
      pyr[npyr][0] = conn[23];
      pyr[npyr][1] = conn[18];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[15];
      pyr[npyr][4] = conn[4];
      npyr++;
      tet[ntet][0] = conn[10];
      tet[ntet][1] = conn[23];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[14];
      tet[ntet][1] = conn[23];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[18];
      tet[ntet][1] = conn[23];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[15];
      tet[ntet][1] = conn[23];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[0];
      ntet++;
      break;
    case  38095: // 001001010011001111
      pri[npri][0] = conn[2];
      pri[npri][1] = conn[9];
      pri[npri][2] = conn[14];
      pri[npri][3] = conn[10];
      pri[npri][4] = conn[20];
      pri[npri][5] = conn[23];
      npri++;
      pri[npri][0] = conn[10];
      pri[npri][1] = conn[20];
      pri[npri][2] = conn[23];
      pri[npri][3] = conn[3];
      pri[npri][4] = conn[11];
      pri[npri][5] = conn[15];
      npri++;
      pyr[npyr][0] = conn[9];
      pyr[npyr][1] = conn[20];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[14];
      pyr[npyr][1] = conn[23];
      pyr[npyr][2] = conn[20];
      pyr[npyr][3] = conn[9];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[6];
      pyr[npyr][1] = conn[18];
      pyr[npyr][2] = conn[23];
      pyr[npyr][3] = conn[14];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[20];
      pyr[npyr][1] = conn[11];
      pyr[npyr][2] = conn[0];
      pyr[npyr][3] = conn[8];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[23];
      pyr[npyr][1] = conn[15];
      pyr[npyr][2] = conn[11];
      pyr[npyr][3] = conn[20];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[18];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[15];
      pyr[npyr][3] = conn[23];
      pyr[npyr][4] = conn[4];
      npyr++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[20];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[20];
      tet[ntet][1] = conn[23];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[23];
      tet[ntet][1] = conn[18];
      tet[ntet][2] = conn[4];
      tet[ntet][3] = conn[5];
      ntet++;
      break;
    case  50918: // 001100011011100110
      pri[npri][0] = conn[2];
      pri[npri][1] = conn[10];
      pri[npri][2] = conn[9];
      pri[npri][3] = conn[14];
      pri[npri][4] = conn[23];
      pri[npri][5] = conn[22];
      npri++;
      pri[npri][0] = conn[14];
      pri[npri][1] = conn[23];
      pri[npri][2] = conn[22];
      pri[npri][3] = conn[6];
      pri[npri][4] = conn[18];
      pri[npri][5] = conn[17];
      npri++;
      pyr[npyr][0] = conn[17];
      pyr[npyr][1] = conn[22];
      pyr[npyr][2] = conn[13];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[18];
      pyr[npyr][1] = conn[23];
      pyr[npyr][2] = conn[22];
      pyr[npyr][3] = conn[17];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[15];
      pyr[npyr][2] = conn[23];
      pyr[npyr][3] = conn[18];
      pyr[npyr][4] = conn[4];
      npyr++;
      pyr[npyr][0] = conn[22];
      pyr[npyr][1] = conn[9];
      pyr[npyr][2] = conn[1];
      pyr[npyr][3] = conn[13];
      pyr[npyr][4] = conn[0];
      npyr++;
      pyr[npyr][0] = conn[23];
      pyr[npyr][1] = conn[10];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[22];
      pyr[npyr][4] = conn[0];
      npyr++;
      pyr[npyr][0] = conn[15];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[10];
      pyr[npyr][3] = conn[23];
      pyr[npyr][4] = conn[0];
      npyr++;
      tet[ntet][0] = conn[13];
      tet[ntet][1] = conn[22];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[22];
      tet[ntet][1] = conn[23];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[4];
      ntet++;
      tet[ntet][0] = conn[23];
      tet[ntet][1] = conn[15];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[4];
      ntet++;
      break;
    case  65536: // 010000000000000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[24];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[24];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[24];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[24];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[24];
      npyr++;
      break;
    case  67736: // 010000100010011000
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[24];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[11];
      pyr[npyr][2] = conn[24];
      pyr[npyr][3] = conn[12];
      pyr[npyr][4] = conn[1];
      npyr++;
      pyr[npyr][0] = conn[11];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[15];
      pyr[npyr][3] = conn[24];
      pyr[npyr][4] = conn[2];
      npyr++;
      pyr[npyr][0] = conn[12];
      pyr[npyr][1] = conn[24];
      pyr[npyr][2] = conn[19];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[24];
      pyr[npyr][1] = conn[15];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[19];
      pyr[npyr][4] = conn[6];
      npyr++;
      tet[ntet][0] = conn[11];
      tet[ntet][1] = conn[24];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[2];
      ntet++;
      tet[ntet][0] = conn[12];
      tet[ntet][1] = conn[24];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[19];
      tet[ntet][1] = conn[24];
      tet[ntet][2] = conn[6];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[15];
      tet[ntet][1] = conn[24];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[6];
      ntet++;
      break;
    case  71839: // 010001100010011111
      pri[npri][0] = conn[3];
      pri[npri][1] = conn[10];
      pri[npri][2] = conn[15];
      pri[npri][3] = conn[11];
      pri[npri][4] = conn[20];
      pri[npri][5] = conn[24];
      npri++;
      pri[npri][0] = conn[11];
      pri[npri][1] = conn[20];
      pri[npri][2] = conn[24];
      pri[npri][3] = conn[0];
      pri[npri][4] = conn[8];
      pri[npri][5] = conn[12];
      npri++;
      pyr[npyr][0] = conn[10];
      pyr[npyr][1] = conn[20];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[15];
      pyr[npyr][1] = conn[24];
      pyr[npyr][2] = conn[20];
      pyr[npyr][3] = conn[10];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[19];
      pyr[npyr][2] = conn[24];
      pyr[npyr][3] = conn[15];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[20];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[1];
      pyr[npyr][3] = conn[9];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[24];
      pyr[npyr][1] = conn[12];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[20];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[19];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[12];
      pyr[npyr][3] = conn[24];
      pyr[npyr][4] = conn[5];
      npyr++;
      tet[ntet][0] = conn[9];
      tet[ntet][1] = conn[20];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[6];
      ntet++;
      tet[ntet][0] = conn[20];
      tet[ntet][1] = conn[24];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[6];
      ntet++;
      tet[ntet][0] = conn[24];
      tet[ntet][1] = conn[19];
      tet[ntet][2] = conn[5];
      tet[ntet][3] = conn[6];
      ntet++;
      break;
    case  76217: // 010010100110111001
      pri[npri][0] = conn[0];
      pri[npri][1] = conn[8];
      pri[npri][2] = conn[11];
      pri[npri][3] = conn[12];
      pri[npri][4] = conn[21];
      pri[npri][5] = conn[24];
      npri++;
      pri[npri][0] = conn[12];
      pri[npri][1] = conn[21];
      pri[npri][2] = conn[24];
      pri[npri][3] = conn[4];
      pri[npri][4] = conn[16];
      pri[npri][5] = conn[19];
      npri++;
      pyr[npyr][0] = conn[19];
      pyr[npyr][1] = conn[24];
      pyr[npyr][2] = conn[15];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[16];
      pyr[npyr][1] = conn[21];
      pyr[npyr][2] = conn[24];
      pyr[npyr][3] = conn[19];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[13];
      pyr[npyr][2] = conn[21];
      pyr[npyr][3] = conn[16];
      pyr[npyr][4] = conn[6];
      npyr++;
      pyr[npyr][0] = conn[24];
      pyr[npyr][1] = conn[11];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[15];
      pyr[npyr][4] = conn[2];
      npyr++;
      pyr[npyr][0] = conn[21];
      pyr[npyr][1] = conn[8];
      pyr[npyr][2] = conn[11];
      pyr[npyr][3] = conn[24];
      pyr[npyr][4] = conn[2];
      npyr++;
      pyr[npyr][0] = conn[13];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[21];
      pyr[npyr][4] = conn[2];
      npyr++;
      tet[ntet][0] = conn[15];
      tet[ntet][1] = conn[24];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[6];
      ntet++;
      tet[ntet][0] = conn[24];
      tet[ntet][1] = conn[21];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[6];
      ntet++;
      tet[ntet][0] = conn[21];
      tet[ntet][1] = conn[13];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[6];
      ntet++;
      break;
    case 101596: // 011000110011011100
      pri[npri][0] = conn[3];
      pri[npri][1] = conn[11];
      pri[npri][2] = conn[10];
      pri[npri][3] = conn[15];
      pri[npri][4] = conn[24];
      pri[npri][5] = conn[23];
      npri++;
      pri[npri][0] = conn[15];
      pri[npri][1] = conn[24];
      pri[npri][2] = conn[23];
      pri[npri][3] = conn[7];
      pri[npri][4] = conn[19];
      pri[npri][5] = conn[18];
      npri++;
      pyr[npyr][0] = conn[18];
      pyr[npyr][1] = conn[23];
      pyr[npyr][2] = conn[14];
      pyr[npyr][3] = conn[6];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[19];
      pyr[npyr][1] = conn[24];
      pyr[npyr][2] = conn[23];
      pyr[npyr][3] = conn[18];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[12];
      pyr[npyr][2] = conn[24];
      pyr[npyr][3] = conn[19];
      pyr[npyr][4] = conn[5];
      npyr++;
      pyr[npyr][0] = conn[23];
      pyr[npyr][1] = conn[10];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[14];
      pyr[npyr][4] = conn[1];
      npyr++;
      pyr[npyr][0] = conn[24];
      pyr[npyr][1] = conn[11];
      pyr[npyr][2] = conn[10];
      pyr[npyr][3] = conn[23];
      pyr[npyr][4] = conn[1];
      npyr++;
      pyr[npyr][0] = conn[12];
      pyr[npyr][1] = conn[0];
      pyr[npyr][2] = conn[11];
      pyr[npyr][3] = conn[24];
      pyr[npyr][4] = conn[1];
      npyr++;
      tet[ntet][0] = conn[14];
      tet[ntet][1] = conn[23];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[23];
      tet[ntet][1] = conn[24];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[5];
      ntet++;
      tet[ntet][0] = conn[24];
      tet[ntet][1] = conn[12];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[5];
      ntet++;
      break;
    case 131072: // 100000000000000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[25];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[5];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[25];
      npyr++;
      pyr[npyr][0] = conn[1];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[25];
      npyr++;
      pyr[npyr][0] = conn[3];
      pyr[npyr][1] = conn[2];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[7];
      pyr[npyr][4] = conn[25];
      npyr++;
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[3];
      pyr[npyr][2] = conn[7];
      pyr[npyr][3] = conn[4];
      pyr[npyr][4] = conn[25];
      npyr++;
      break;
    case 134912: // 100000111100000000
      pyr[npyr][0] = conn[0];
      pyr[npyr][1] = conn[1];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[25];
      npyr++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[19];
      pyr[npyr][2] = conn[25];
      pyr[npyr][3] = conn[16];
      pyr[npyr][4] = conn[0];
      npyr++;
      pyr[npyr][0] = conn[16];
      pyr[npyr][1] = conn[25];
      pyr[npyr][2] = conn[17];
      pyr[npyr][3] = conn[5];
      pyr[npyr][4] = conn[1];
      npyr++;
      pyr[npyr][0] = conn[25];
      pyr[npyr][1] = conn[18];
      pyr[npyr][2] = conn[6];
      pyr[npyr][3] = conn[17];
      pyr[npyr][4] = conn[2];
      npyr++;
      pyr[npyr][0] = conn[19];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[18];
      pyr[npyr][3] = conn[25];
      pyr[npyr][4] = conn[3];
      npyr++;
      tet[ntet][0] = conn[16];
      tet[ntet][1] = conn[25];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[0];
      ntet++;
      tet[ntet][0] = conn[17];
      tet[ntet][1] = conn[25];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[18];
      tet[ntet][1] = conn[25];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[2];
      ntet++;
      tet[ntet][0] = conn[19];
      tet[ntet][1] = conn[25];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case 143153: // 100010111100110001
      pri[npri][0] = conn[4];
      pri[npri][1] = conn[12];
      pri[npri][2] = conn[19];
      pri[npri][3] = conn[16];
      pri[npri][4] = conn[21];
      pri[npri][5] = conn[25];
      npri++;
      pri[npri][0] = conn[16];
      pri[npri][1] = conn[21];
      pri[npri][2] = conn[25];
      pri[npri][3] = conn[5];
      pri[npri][4] = conn[13];
      pri[npri][5] = conn[17];
      npri++;
      pyr[npyr][0] = conn[12];
      pyr[npyr][1] = conn[21];
      pyr[npyr][2] = conn[8];
      pyr[npyr][3] = conn[0];
      pyr[npyr][4] = conn[3];
      npyr++;
      pyr[npyr][0] = conn[19];
      pyr[npyr][1] = conn[25];
      pyr[npyr][2] = conn[21];
      pyr[npyr][3] = conn[12];
      pyr[npyr][4] = conn[3];
      npyr++;
      pyr[npyr][0] = conn[7];
      pyr[npyr][1] = conn[18];
      pyr[npyr][2] = conn[25];
      pyr[npyr][3] = conn[19];
      pyr[npyr][4] = conn[3];
      npyr++;
      pyr[npyr][0] = conn[21];
      pyr[npyr][1] = conn[13];
      pyr[npyr][2] = conn[1];
      pyr[npyr][3] = conn[8];
      pyr[npyr][4] = conn[2];
      npyr++;
      pyr[npyr][0] = conn[25];
      pyr[npyr][1] = conn[17];
      pyr[npyr][2] = conn[13];
      pyr[npyr][3] = conn[21];
      pyr[npyr][4] = conn[2];
      npyr++;
      pyr[npyr][0] = conn[18];
      pyr[npyr][1] = conn[6];
      pyr[npyr][2] = conn[17];
      pyr[npyr][3] = conn[25];
      pyr[npyr][4] = conn[2];
      npyr++;
      tet[ntet][0] = conn[8];
      tet[ntet][1] = conn[21];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[21];
      tet[ntet][1] = conn[25];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      tet[ntet][0] = conn[25];
      tet[ntet][1] = conn[18];
      tet[ntet][2] = conn[2];
      tet[ntet][3] = conn[3];
      ntet++;
      break;
    case 151394: // 100100111101100010
      pri[npri][0] = conn[5];
      pri[npri][1] = conn[13];
      pri[npri][2] = conn[16];
      pri[npri][3] = conn[17];
      pri[npri][4] = conn[22];
      pri[npri][5] = conn[25];
      npri++;
      pri[npri][0] = conn[17];
      pri[npri][1] = conn[22];
      pri[npri][2] = conn[25];
      pri[npri][3] = conn[6];
      pri[npri][4] = conn[14];
      pri[npri][5] = conn[18];
      npri++;
      pyr[npyr][0] = conn[13];
      pyr[npyr][1] = conn[22];
      pyr[npyr][2] = conn[9];
      pyr[npyr][3] = conn[1];
      pyr[npyr][4] = conn[0];
      npyr++;
      pyr[npyr][0] = conn[16];
      pyr[npyr][1] = conn[25];
      pyr[npyr][2] = conn[22];
      pyr[npyr][3] = conn[13];
      pyr[npyr][4] = conn[0];
      npyr++;
      pyr[npyr][0] = conn[4];
      pyr[npyr][1] = conn[19];
      pyr[npyr][2] = conn[25];
      pyr[npyr][3] = conn[16];
      pyr[npyr][4] = conn[0];
      npyr++;
      pyr[npyr][0] = conn[22];
      pyr[npyr][1] = conn[14];
      pyr[npyr][2] = conn[2];
      pyr[npyr][3] = conn[9];
      pyr[npyr][4] = conn[3];
      npyr++;
      pyr[npyr][0] = conn[25];
      pyr[npyr][1] = conn[18];
      pyr[npyr][2] = conn[14];
      pyr[npyr][3] = conn[22];
      pyr[npyr][4] = conn[3];
      npyr++;
      pyr[npyr][0] = conn[19];
      pyr[npyr][1] = conn[7];
      pyr[npyr][2] = conn[18];
      pyr[npyr][3] = conn[25];
      pyr[npyr][4] = conn[3];
      npyr++;
      tet[ntet][0] = conn[9];
      tet[ntet][1] = conn[22];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[0];
      ntet++;
      tet[ntet][0] = conn[22];
      tet[ntet][1] = conn[25];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[0];
      ntet++;
      tet[ntet][0] = conn[25];
      tet[ntet][1] = conn[19];
      tet[ntet][2] = conn[3];
      tet[ntet][3] = conn[0];
      ntet++;
      break;
    case 167876: // 101000111111000100
      pri[npri][0] = conn[6];
      pri[npri][1] = conn[14];
      pri[npri][2] = conn[17];
      pri[npri][3] = conn[18];
      pri[npri][4] = conn[23];
      pri[npri][5] = conn[25];
      npri++;
      pri[npri][0] = conn[18];
      pri[npri][1] = conn[23];
      pri[npri][2] = conn[25];
      pri[npri][3] = conn[7];
      pri[npri][4] = conn[15];
      pri[npri][5] = conn[19];
      npri++;
      pyr[npyr][0] = conn[14];
      pyr[npyr][1] = conn[23];
      pyr[npyr][2] = conn[10];
      pyr[npyr][3] = conn[2];
      pyr[npyr][4] = conn[1];
      npyr++;
      pyr[npyr][0] = conn[17];
      pyr[npyr][1] = conn[25];
      pyr[npyr][2] = conn[23];
      pyr[npyr][3] = conn[14];
      pyr[npyr][4] = conn[1];
      npyr++;
      pyr[npyr][0] = conn[5];
      pyr[npyr][1] = conn[16];
      pyr[npyr][2] = conn[25];
      pyr[npyr][3] = conn[17];
      pyr[npyr][4] = conn[1];
      npyr++;
      pyr[npyr][0] = conn[23];
      pyr[npyr][1] = conn[15];
      pyr[npyr][2] = conn[3];
      pyr[npyr][3] = conn[10];
      pyr[npyr][4] = conn[0];
      npyr++;
      pyr[npyr][0] = conn[25];
      pyr[npyr][1] = conn[19];
      pyr[npyr][2] = conn[15];
      pyr[npyr][3] = conn[23];
      pyr[npyr][4] = conn[0];
      npyr++;
      pyr[npyr][0] = conn[16];
      pyr[npyr][1] = conn[4];
      pyr[npyr][2] = conn[19];
      pyr[npyr][3] = conn[25];
      pyr[npyr][4] = conn[0];
      npyr++;
      tet[ntet][0] = conn[10];
      tet[ntet][1] = conn[23];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[23];
      tet[ntet][1] = conn[25];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[1];
      ntet++;
      tet[ntet][0] = conn[25];
      tet[ntet][1] = conn[16];
      tet[ntet][2] = conn[0];
      tet[ntet][3] = conn[1];
      ntet++;
      break;
    case 200600: // 110000111110011000
      pri[npri][0] = conn[7];
      pri[npri][1] = conn[15];
      pri[npri][2] = conn[18];
      pri[npri][3] = conn[19];
      pri[npri][4] = conn[24];
      pri[npri][5] = conn[25];
      npri++;
      pri[npri][0] = conn[19];
      pri[npri][1] = conn[24];
      pri[npri][2] = conn[25];
      pri[npri][3] = conn[4];
      pri[npri][4] = conn[12];
      pri[npri][5] = conn[16];
      npri++;
      pyr[npyr][0] = conn[15];
      pyr[npyr][1] = conn[24];
      pyr[npyr][2] = conn[11];
      pyr[npyr][3] = conn[3];
      pyr[npyr][4] = conn[2];
      npyr++;
      pyr[npyr][0] = conn[18];
      pyr[npyr][1] = conn[25];
      pyr[npyr][2] = conn[24];
      pyr[npyr][3] = conn[15];
      pyr[npyr][4] = conn[2];
      npyr++;
      pyr[npyr][0] = conn[6];
      pyr[npyr][1] = conn[17];
      pyr[npyr][2] = conn[25];
      pyr[npyr][3] = conn[18];
      pyr[npyr][4] = conn[2];
      npyr++;
      pyr[npyr][0] = conn[24];
      pyr[npyr][1] = conn[12];
      pyr[npyr][2] = conn[0];
      pyr[npyr][3] = conn[11];
      pyr[npyr][4] = conn[1];
      npyr++;
      pyr[npyr][0] = conn[25];
      pyr[npyr][1] = conn[16];
      pyr[npyr][2] = conn[12];
      pyr[npyr][3] = conn[24];
      pyr[npyr][4] = conn[1];
      npyr++;
      pyr[npyr][0] = conn[17];
      pyr[npyr][1] = conn[5];
      pyr[npyr][2] = conn[16];
      pyr[npyr][3] = conn[25];
      pyr[npyr][4] = conn[1];
      npyr++;
      tet[ntet][0] = conn[11];
      tet[ntet][1] = conn[24];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[2];
      ntet++;
      tet[ntet][0] = conn[24];
      tet[ntet][1] = conn[25];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[2];
      ntet++;
      tet[ntet][0] = conn[25];
      tet[ntet][1] = conn[17];
      tet[ntet][2] = conn[1];
      tet[ntet][3] = conn[2];
      ntet++;
      break;
    case 262143: // 111111111111111111
      hex[nhex][0] = conn[0];
      hex[nhex][1] = conn[8];
      hex[nhex][2] = conn[20];
      hex[nhex][3] = conn[11];
      hex[nhex][4] = conn[12];
      hex[nhex][5] = conn[21];
      hex[nhex][6] = conn[26];
      hex[nhex][7] = conn[24];
      nhex++;
      hex[nhex][0] = conn[8];
      hex[nhex][1] = conn[1];
      hex[nhex][2] = conn[9];
      hex[nhex][3] = conn[20];
      hex[nhex][4] = conn[21];
      hex[nhex][5] = conn[13];
      hex[nhex][6] = conn[22];
      hex[nhex][7] = conn[26];
      nhex++;
      hex[nhex][0] = conn[11];
      hex[nhex][1] = conn[20];
      hex[nhex][2] = conn[10];
      hex[nhex][3] = conn[3];
      hex[nhex][4] = conn[24];
      hex[nhex][5] = conn[26];
      hex[nhex][6] = conn[23];
      hex[nhex][7] = conn[15];
      nhex++;
      hex[nhex][0] = conn[20];
      hex[nhex][1] = conn[9];
      hex[nhex][2] = conn[2];
      hex[nhex][3] = conn[10];
      hex[nhex][4] = conn[26];
      hex[nhex][5] = conn[22];
      hex[nhex][6] = conn[14];
      hex[nhex][7] = conn[23];
      nhex++;
      hex[nhex][0] = conn[12];
      hex[nhex][1] = conn[21];
      hex[nhex][2] = conn[26];
      hex[nhex][3] = conn[24];
      hex[nhex][4] = conn[4];
      hex[nhex][5] = conn[16];
      hex[nhex][6] = conn[25];
      hex[nhex][7] = conn[19];
      nhex++;
      hex[nhex][0] = conn[21];
      hex[nhex][1] = conn[13];
      hex[nhex][2] = conn[22];
      hex[nhex][3] = conn[26];
      hex[nhex][4] = conn[16];
      hex[nhex][5] = conn[5];
      hex[nhex][6] = conn[17];
      hex[nhex][7] = conn[25];
      nhex++;
      hex[nhex][0] = conn[24];
      hex[nhex][1] = conn[26];
      hex[nhex][2] = conn[23];
      hex[nhex][3] = conn[15];
      hex[nhex][4] = conn[19];
      hex[nhex][5] = conn[25];
      hex[nhex][6] = conn[18];
      hex[nhex][7] = conn[7];
      nhex++;
      hex[nhex][0] = conn[26];
      hex[nhex][1] = conn[22];
      hex[nhex][2] = conn[14];
      hex[nhex][3] = conn[23];
      hex[nhex][4] = conn[25];
      hex[nhex][5] = conn[17];
      hex[nhex][6] = conn[6];
      hex[nhex][7] = conn[18];
      nhex++;
      break;
    default:
      if (!hits.In_list(mask))
      {
        #ifdef _DEBUG
        //fprintf(debug_f,"\nREFINE_HEX: Hex marking not implemented, mask = %ld",mask);
        //fprintf(debug_f,"\n            Using general quad-fill with faces.");
        //fflush(debug_f);
        #endif
        hits.Insert(mask);
      }
      if (conn[26] < 0)
        flag = 0;
      else
      {
        for (s=0; s < 6; s++)
        {
          switch (s)
          {
            case 0:
              fn[0] = conn[ 0];
              fn[1] = conn[ 1];
              fn[2] = conn[ 2];
              fn[3] = conn[ 3];
              fn[4] = conn[ 8];
              fn[5] = conn[ 9];
              fn[6] = conn[10];
              fn[7] = conn[11];
              fn[8] = conn[20];
              break;
            case 1:
              fn[0] = conn[ 0];
              fn[1] = conn[ 4];
              fn[2] = conn[ 5];
              fn[3] = conn[ 1];
              fn[4] = conn[12];
              fn[5] = conn[16];
              fn[6] = conn[13];
              fn[7] = conn[ 8];
              fn[8] = conn[21];
              break;
            case 2:
              fn[0] = conn[ 1];
              fn[1] = conn[ 5];
              fn[2] = conn[ 6];
              fn[3] = conn[ 2];
              fn[4] = conn[13];
              fn[5] = conn[17];
              fn[6] = conn[14];
              fn[7] = conn[ 9];
              fn[8] = conn[22];
              break;
            case 3:
              fn[0] = conn[ 2];
              fn[1] = conn[ 6];
              fn[2] = conn[ 7];
              fn[3] = conn[ 3];
              fn[4] = conn[14];
              fn[5] = conn[18];
              fn[6] = conn[15];
              fn[7] = conn[10];
              fn[8] = conn[23];
              break;
            case 4:
              fn[0] = conn[ 3];
              fn[1] = conn[ 7];
              fn[2] = conn[ 4];
              fn[3] = conn[ 0];
              fn[4] = conn[15];
              fn[5] = conn[19];
              fn[6] = conn[12];
              fn[7] = conn[11];
              fn[8] = conn[24];
              break;
            case 5:
              fn[0] = conn[ 4];
              fn[1] = conn[ 7];
              fn[2] = conn[ 6];
              fn[3] = conn[ 5];
              fn[4] = conn[19];
              fn[5] = conn[18];
              fn[6] = conn[17];
              fn[7] = conn[16];
              fn[8] = conn[25];
              break;
          }
          quad_fill(cdim, ntet, tet, npyr, pyr, npri, pri, nhex, hex, conn[26], fn);
        }
      }
      break;
  }

  return(flag);

}
